// Code generated by mockery v2.33.2. DO NOT EDIT.

package lvm

import (
	lvm "github.com/openshift/lvm-operator/internal/controllers/vgmanager/lvm"
	mock "github.com/stretchr/testify/mock"
)

// MockLVM is an autogenerated mock type for the LVM type
type MockLVM struct {
	mock.Mock
}

type MockLVM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLVM) EXPECT() *MockLVM_Expecter {
	return &MockLVM_Expecter{mock: &_m.Mock}
}

// AddTagToVG provides a mock function with given fields: vgName
func (_m *MockLVM) AddTagToVG(vgName string) error {
	ret := _m.Called(vgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(vgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLVM_AddTagToVG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTagToVG'
type MockLVM_AddTagToVG_Call struct {
	*mock.Call
}

// AddTagToVG is a helper method to define mock.On call
//   - vgName string
func (_e *MockLVM_Expecter) AddTagToVG(vgName interface{}) *MockLVM_AddTagToVG_Call {
	return &MockLVM_AddTagToVG_Call{Call: _e.mock.On("AddTagToVG", vgName)}
}

func (_c *MockLVM_AddTagToVG_Call) Run(run func(vgName string)) *MockLVM_AddTagToVG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLVM_AddTagToVG_Call) Return(_a0 error) *MockLVM_AddTagToVG_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLVM_AddTagToVG_Call) RunAndReturn(run func(string) error) *MockLVM_AddTagToVG_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLV provides a mock function with given fields: lvName, vgName, sizePercent
func (_m *MockLVM) CreateLV(lvName string, vgName string, sizePercent int) error {
	ret := _m.Called(lvName, vgName, sizePercent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(lvName, vgName, sizePercent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLVM_CreateLV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLV'
type MockLVM_CreateLV_Call struct {
	*mock.Call
}

// CreateLV is a helper method to define mock.On call
//   - lvName string
//   - vgName string
//   - sizePercent int
func (_e *MockLVM_Expecter) CreateLV(lvName interface{}, vgName interface{}, sizePercent interface{}) *MockLVM_CreateLV_Call {
	return &MockLVM_CreateLV_Call{Call: _e.mock.On("CreateLV", lvName, vgName, sizePercent)}
}

func (_c *MockLVM_CreateLV_Call) Run(run func(lvName string, vgName string, sizePercent int)) *MockLVM_CreateLV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockLVM_CreateLV_Call) Return(_a0 error) *MockLVM_CreateLV_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLVM_CreateLV_Call) RunAndReturn(run func(string, string, int) error) *MockLVM_CreateLV_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVG provides a mock function with given fields: vg
func (_m *MockLVM) CreateVG(vg lvm.VolumeGroup) error {
	ret := _m.Called(vg)

	var r0 error
	if rf, ok := ret.Get(0).(func(lvm.VolumeGroup) error); ok {
		r0 = rf(vg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLVM_CreateVG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVG'
type MockLVM_CreateVG_Call struct {
	*mock.Call
}

// CreateVG is a helper method to define mock.On call
//   - vg lvm.VolumeGroup
func (_e *MockLVM_Expecter) CreateVG(vg interface{}) *MockLVM_CreateVG_Call {
	return &MockLVM_CreateVG_Call{Call: _e.mock.On("CreateVG", vg)}
}

func (_c *MockLVM_CreateVG_Call) Run(run func(vg lvm.VolumeGroup)) *MockLVM_CreateVG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lvm.VolumeGroup))
	})
	return _c
}

func (_c *MockLVM_CreateVG_Call) Return(_a0 error) *MockLVM_CreateVG_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLVM_CreateVG_Call) RunAndReturn(run func(lvm.VolumeGroup) error) *MockLVM_CreateVG_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLV provides a mock function with given fields: lvName, vgName
func (_m *MockLVM) DeleteLV(lvName string, vgName string) error {
	ret := _m.Called(lvName, vgName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(lvName, vgName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLVM_DeleteLV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLV'
type MockLVM_DeleteLV_Call struct {
	*mock.Call
}

// DeleteLV is a helper method to define mock.On call
//   - lvName string
//   - vgName string
func (_e *MockLVM_Expecter) DeleteLV(lvName interface{}, vgName interface{}) *MockLVM_DeleteLV_Call {
	return &MockLVM_DeleteLV_Call{Call: _e.mock.On("DeleteLV", lvName, vgName)}
}

func (_c *MockLVM_DeleteLV_Call) Run(run func(lvName string, vgName string)) *MockLVM_DeleteLV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockLVM_DeleteLV_Call) Return(_a0 error) *MockLVM_DeleteLV_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLVM_DeleteLV_Call) RunAndReturn(run func(string, string) error) *MockLVM_DeleteLV_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVG provides a mock function with given fields: vg
func (_m *MockLVM) DeleteVG(vg lvm.VolumeGroup) error {
	ret := _m.Called(vg)

	var r0 error
	if rf, ok := ret.Get(0).(func(lvm.VolumeGroup) error); ok {
		r0 = rf(vg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLVM_DeleteVG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVG'
type MockLVM_DeleteVG_Call struct {
	*mock.Call
}

// DeleteVG is a helper method to define mock.On call
//   - vg lvm.VolumeGroup
func (_e *MockLVM_Expecter) DeleteVG(vg interface{}) *MockLVM_DeleteVG_Call {
	return &MockLVM_DeleteVG_Call{Call: _e.mock.On("DeleteVG", vg)}
}

func (_c *MockLVM_DeleteVG_Call) Run(run func(vg lvm.VolumeGroup)) *MockLVM_DeleteVG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lvm.VolumeGroup))
	})
	return _c
}

func (_c *MockLVM_DeleteVG_Call) Return(_a0 error) *MockLVM_DeleteVG_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLVM_DeleteVG_Call) RunAndReturn(run func(lvm.VolumeGroup) error) *MockLVM_DeleteVG_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendLV provides a mock function with given fields: lvName, vgName, sizePercent
func (_m *MockLVM) ExtendLV(lvName string, vgName string, sizePercent int) error {
	ret := _m.Called(lvName, vgName, sizePercent)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(lvName, vgName, sizePercent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLVM_ExtendLV_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendLV'
type MockLVM_ExtendLV_Call struct {
	*mock.Call
}

// ExtendLV is a helper method to define mock.On call
//   - lvName string
//   - vgName string
//   - sizePercent int
func (_e *MockLVM_Expecter) ExtendLV(lvName interface{}, vgName interface{}, sizePercent interface{}) *MockLVM_ExtendLV_Call {
	return &MockLVM_ExtendLV_Call{Call: _e.mock.On("ExtendLV", lvName, vgName, sizePercent)}
}

func (_c *MockLVM_ExtendLV_Call) Run(run func(lvName string, vgName string, sizePercent int)) *MockLVM_ExtendLV_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *MockLVM_ExtendLV_Call) Return(_a0 error) *MockLVM_ExtendLV_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLVM_ExtendLV_Call) RunAndReturn(run func(string, string, int) error) *MockLVM_ExtendLV_Call {
	_c.Call.Return(run)
	return _c
}

// ExtendVG provides a mock function with given fields: vg, pvs
func (_m *MockLVM) ExtendVG(vg lvm.VolumeGroup, pvs []string) (lvm.VolumeGroup, error) {
	ret := _m.Called(vg, pvs)

	var r0 lvm.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(lvm.VolumeGroup, []string) (lvm.VolumeGroup, error)); ok {
		return rf(vg, pvs)
	}
	if rf, ok := ret.Get(0).(func(lvm.VolumeGroup, []string) lvm.VolumeGroup); ok {
		r0 = rf(vg, pvs)
	} else {
		r0 = ret.Get(0).(lvm.VolumeGroup)
	}

	if rf, ok := ret.Get(1).(func(lvm.VolumeGroup, []string) error); ok {
		r1 = rf(vg, pvs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLVM_ExtendVG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtendVG'
type MockLVM_ExtendVG_Call struct {
	*mock.Call
}

// ExtendVG is a helper method to define mock.On call
//   - vg lvm.VolumeGroup
//   - pvs []string
func (_e *MockLVM_Expecter) ExtendVG(vg interface{}, pvs interface{}) *MockLVM_ExtendVG_Call {
	return &MockLVM_ExtendVG_Call{Call: _e.mock.On("ExtendVG", vg, pvs)}
}

func (_c *MockLVM_ExtendVG_Call) Run(run func(vg lvm.VolumeGroup, pvs []string)) *MockLVM_ExtendVG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lvm.VolumeGroup), args[1].([]string))
	})
	return _c
}

func (_c *MockLVM_ExtendVG_Call) Return(_a0 lvm.VolumeGroup, _a1 error) *MockLVM_ExtendVG_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLVM_ExtendVG_Call) RunAndReturn(run func(lvm.VolumeGroup, []string) (lvm.VolumeGroup, error)) *MockLVM_ExtendVG_Call {
	_c.Call.Return(run)
	return _c
}

// GetVG provides a mock function with given fields: name
func (_m *MockLVM) GetVG(name string) (lvm.VolumeGroup, error) {
	ret := _m.Called(name)

	var r0 lvm.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (lvm.VolumeGroup, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) lvm.VolumeGroup); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(lvm.VolumeGroup)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLVM_GetVG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVG'
type MockLVM_GetVG_Call struct {
	*mock.Call
}

// GetVG is a helper method to define mock.On call
//   - name string
func (_e *MockLVM_Expecter) GetVG(name interface{}) *MockLVM_GetVG_Call {
	return &MockLVM_GetVG_Call{Call: _e.mock.On("GetVG", name)}
}

func (_c *MockLVM_GetVG_Call) Run(run func(name string)) *MockLVM_GetVG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLVM_GetVG_Call) Return(_a0 lvm.VolumeGroup, _a1 error) *MockLVM_GetVG_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLVM_GetVG_Call) RunAndReturn(run func(string) (lvm.VolumeGroup, error)) *MockLVM_GetVG_Call {
	_c.Call.Return(run)
	return _c
}

// LVExists provides a mock function with given fields: lvName, vgName
func (_m *MockLVM) LVExists(lvName string, vgName string) (bool, error) {
	ret := _m.Called(lvName, vgName)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(lvName, vgName)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(lvName, vgName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(lvName, vgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLVM_LVExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LVExists'
type MockLVM_LVExists_Call struct {
	*mock.Call
}

// LVExists is a helper method to define mock.On call
//   - lvName string
//   - vgName string
func (_e *MockLVM_Expecter) LVExists(lvName interface{}, vgName interface{}) *MockLVM_LVExists_Call {
	return &MockLVM_LVExists_Call{Call: _e.mock.On("LVExists", lvName, vgName)}
}

func (_c *MockLVM_LVExists_Call) Run(run func(lvName string, vgName string)) *MockLVM_LVExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockLVM_LVExists_Call) Return(_a0 bool, _a1 error) *MockLVM_LVExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLVM_LVExists_Call) RunAndReturn(run func(string, string) (bool, error)) *MockLVM_LVExists_Call {
	_c.Call.Return(run)
	return _c
}

// ListLVs provides a mock function with given fields: vgName
func (_m *MockLVM) ListLVs(vgName string) (*lvm.LVReport, error) {
	ret := _m.Called(vgName)

	var r0 *lvm.LVReport
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*lvm.LVReport, error)); ok {
		return rf(vgName)
	}
	if rf, ok := ret.Get(0).(func(string) *lvm.LVReport); ok {
		r0 = rf(vgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lvm.LVReport)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLVM_ListLVs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLVs'
type MockLVM_ListLVs_Call struct {
	*mock.Call
}

// ListLVs is a helper method to define mock.On call
//   - vgName string
func (_e *MockLVM_Expecter) ListLVs(vgName interface{}) *MockLVM_ListLVs_Call {
	return &MockLVM_ListLVs_Call{Call: _e.mock.On("ListLVs", vgName)}
}

func (_c *MockLVM_ListLVs_Call) Run(run func(vgName string)) *MockLVM_ListLVs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLVM_ListLVs_Call) Return(_a0 *lvm.LVReport, _a1 error) *MockLVM_ListLVs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLVM_ListLVs_Call) RunAndReturn(run func(string) (*lvm.LVReport, error)) *MockLVM_ListLVs_Call {
	_c.Call.Return(run)
	return _c
}

// ListLVsByName provides a mock function with given fields: vgName
func (_m *MockLVM) ListLVsByName(vgName string) ([]string, error) {
	ret := _m.Called(vgName)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(vgName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(vgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLVM_ListLVsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLVsByName'
type MockLVM_ListLVsByName_Call struct {
	*mock.Call
}

// ListLVsByName is a helper method to define mock.On call
//   - vgName string
func (_e *MockLVM_Expecter) ListLVsByName(vgName interface{}) *MockLVM_ListLVsByName_Call {
	return &MockLVM_ListLVsByName_Call{Call: _e.mock.On("ListLVsByName", vgName)}
}

func (_c *MockLVM_ListLVsByName_Call) Run(run func(vgName string)) *MockLVM_ListLVsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLVM_ListLVsByName_Call) Return(_a0 []string, _a1 error) *MockLVM_ListLVsByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLVM_ListLVsByName_Call) RunAndReturn(run func(string) ([]string, error)) *MockLVM_ListLVsByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListPVs provides a mock function with given fields: vgName
func (_m *MockLVM) ListPVs(vgName string) ([]lvm.PhysicalVolume, error) {
	ret := _m.Called(vgName)

	var r0 []lvm.PhysicalVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]lvm.PhysicalVolume, error)); ok {
		return rf(vgName)
	}
	if rf, ok := ret.Get(0).(func(string) []lvm.PhysicalVolume); ok {
		r0 = rf(vgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lvm.PhysicalVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(vgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLVM_ListPVs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPVs'
type MockLVM_ListPVs_Call struct {
	*mock.Call
}

// ListPVs is a helper method to define mock.On call
//   - vgName string
func (_e *MockLVM_Expecter) ListPVs(vgName interface{}) *MockLVM_ListPVs_Call {
	return &MockLVM_ListPVs_Call{Call: _e.mock.On("ListPVs", vgName)}
}

func (_c *MockLVM_ListPVs_Call) Run(run func(vgName string)) *MockLVM_ListPVs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLVM_ListPVs_Call) Return(_a0 []lvm.PhysicalVolume, _a1 error) *MockLVM_ListPVs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLVM_ListPVs_Call) RunAndReturn(run func(string) ([]lvm.PhysicalVolume, error)) *MockLVM_ListPVs_Call {
	_c.Call.Return(run)
	return _c
}

// ListVGs provides a mock function with given fields:
func (_m *MockLVM) ListVGs() ([]lvm.VolumeGroup, error) {
	ret := _m.Called()

	var r0 []lvm.VolumeGroup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]lvm.VolumeGroup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []lvm.VolumeGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]lvm.VolumeGroup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLVM_ListVGs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVGs'
type MockLVM_ListVGs_Call struct {
	*mock.Call
}

// ListVGs is a helper method to define mock.On call
func (_e *MockLVM_Expecter) ListVGs() *MockLVM_ListVGs_Call {
	return &MockLVM_ListVGs_Call{Call: _e.mock.On("ListVGs")}
}

func (_c *MockLVM_ListVGs_Call) Run(run func()) *MockLVM_ListVGs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLVM_ListVGs_Call) Return(_a0 []lvm.VolumeGroup, _a1 error) *MockLVM_ListVGs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLVM_ListVGs_Call) RunAndReturn(run func() ([]lvm.VolumeGroup, error)) *MockLVM_ListVGs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLVM creates a new instance of MockLVM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLVM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLVM {
	mock := &MockLVM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
